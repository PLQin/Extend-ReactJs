
汇智网
http://www.hubwiz.com/course/552762019964049d1872fc88/

首先: 
node npm:
	安装Grunt-beginner前端自动化构建工具,(搜索:YEOMAN)
		npm install -g yo
		yo --version  #查看yo的版本
		npm ls -g --depth=1 2>/dev/null | grep generator
			# npm ls -g  列出全局下所有安装的npm包(很多层的树状结构)
			# --depth=1  限制只显示一层目录
			# 2>/dev/null 如果在运行npm ls -g发送错误, 则重定向到空设备文件, 即过滤错误消息
			# | 表示通道, 将上一个命令的输出内容作为下一个命令的输入内容
			# grep generator 在前面的输出结果中检索generator关键字开头的内容



React 不同于mvc框架的 AngularJs；     React只有view； 需要和其他的框架结合才是完整的mvc


React 使用 JSX 来替代常规的 JavaScript。
JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。
我们不需要一定使用 JSX，但它有以下优点：
	JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。
	它是类型安全的，在编译过程中就能发现错误。
	使用 JSX 编写模板更加简单快速。


注意:对于供应商前缀（-webkit, -moz, -o, -ms），除了ms，其他都需要将首字母大写。 比如：-webkit-transition应当通过WebkitTransition来访问，然而-ms-transition 则需要通过msTransition来访问。

在react 0.14前，浏览器端实现对jsx的编译依赖jsxtransformer.js 
在react 0.14后，这个依赖的库改为browser.js
页面script标签的type也由text/jsx改为text/babel
但是以上只能用来测试学习react
生产环境需要借助编译工具事先将jsx编译成js
对应的这个工具也由react-tool更换为babel

引入reactJs:
	1 react.min.js - React 的核心库
	2 react-dom.min.js - 提供与 DOM 相关的功能
	3 browser.min.js - 用于将 JSX 语法转为 JavaScript 语法


目录：
	1 虚拟DOM
	2 JSX：想要引入外部独立的JSX文件, 必须先编译: https://segmentfault.com/q/1010000004388793
	3 react 组件


1 虚拟DOM
	虚拟DOM是React的基石。
	why：
		1 Web应用和网站不同，一个Web应用 中通常会在单页内有大量的DOM操作，而这些DOM操作很慢。
		2 在React中，应用程序在虚拟DOM上操作，这让React有了优化的机会。简单说， React在每次需要渲染时，会先比较当前DOM内容和待渲染内容的差异， 然后再决定如何最优地更新DOM。这个过程被称为reconciliation。
		3 因为有了虚拟DOM这一层，所以通过配备不同的渲染器，就可以将虚拟DOM的内容 渲染到不同的平台。而应用开发者，使用JavaScript就可以通吃各个平台了。

2 JSX：
	*: 在html中使用JSX，还需要引入JSX语法转换库JSXTransform.js。 这个库加载后，将在DOM树构造完成后（通过监听 DOMContentLoaded 事件）处理 JSX脚本：
		1. 搜索DOM树中的script节点，如果其类型为text/jsx则进行后续处理
		2. 读取script节点的内容，将其转化为JavaScript代码
		3. 构造一个新的script元素，设置其内容为转化结果代码，并追加到DOM树head元素中
		4. 想要引入外部独立的JSX文件, 必须先编译: https://segmentfault.com/q/1010000004388793
	a 独立的jsx文件并在body中引用：    <script type="text/jsx" src="....js"></script>     // text/babel 也可以,推荐babel
		区别就在于 babel 支持将按照ES6写的代码转成ES5格式的代码，以便让其能在现代浏览器上正常运行;       用jsx， 只能用ES5的语法。
	b 在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中：// 包括属性啊,变量啊等等
		<h1>{1+1}</h1>   //输出 <h1>2</h1>
	c JSX 中不能使用 if else 语句,但是可以使用三元运算符 !
	d  React 会在指定元素数字后自动添加 px ：
		var myStyle = {
			fontSize: 100,
			color: '#FF0000'
		};
		React.render(
			<h1 style = {myStyle}>菜鸟教程</h1>,
			document.getElementById('example')
		);
	e 注释需要写在花括号中：{/*注释...*/}
		ReactDOM.render(
			<div>
		    <h1>菜鸟教程</h1>
		    {/*注释...*/}
		 	</div>,
			document.getElementById('example')
		);
	f JSX 允许在模板中插入数组，数组会自动展开所有成员：
		var arr = [
 			<h1>菜鸟教程</h1>,
  			<h2>学的不仅是技术，更是梦想！</h2>,
		];
		React.render(
			<div>{arr}</div>,
			document.getElementById('example')
		);
	g-Notice: 
		JSX写在html文件内, type类型应为jsx||babel   推荐使用jsx
		JSX写在外部引用,type类型应为babel

3 react 组件：
3.1	组件理念:
		1 创建组件:
			声明一个对象; 
			此对象内包含大量的方法和属性(键值对的形式),
			此对象内创建元素(键值对的形式)并且调用此对象内部创建的方法也可以为元素绑定事件:			
				rander : function(){
					return (
						<div>
							<button onClick={this.handClick}>显示||隐藏</button>	 // 使用大括号包裹引用的函数
							<span ref="tip">测试点击</span>
						</div> /*用div包裹是为了返回一个结果，而不是两个结果 */
					)
				}
		2 组件创建完毕后开始渲染:
			React.render(组件对象, 需要被组件插入的元素); 

	react渲染html标签和组件:
		要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。
			var myDivElement = <div className="foo" />;
			React.render(myDivElement, document.getElementById('example'));
		要渲染 React 组件，只需创建一个大写字母开头的本地变量:
			var MyComponent = React.createClass({/*...*/}); // element对象,此对象可以封装任意的方法和样式
			var myElement = <MyComponent someProperty={true} />;
			React.render(myElement, document.getElementById('example'));


3.2 react创建元素并显示：
 	语法1 ：React.createElement(type,[props],[children...]) - 在虚拟DOM上创建指定的React元素 ：必选的元素类型；可选的JSON对象；可选的这个元素的子元素(不限)
	    var demo = React.createElement(
	            "ul",
	            null,
	            React.createElement("li",null,"列表1"),
	            React.createElement("li",null,"列表2")
	    );
 	语法2 : createClass，如其名就是创建React组件对应的类，描述你将要创建组件的各种行为，其中只有当组件被渲染时需要输出的内容的render接口是必须实现的，其他都是可选：
		var Hello = React.createClass({
		    render: function() {
		        return <div>Hello Taobao, Hello UED</div>;
		    }
		});
		React.render(Hello, 被插入的元素);
		可以无限个createClass
	语法3 : createFactory，通过工厂方法创建React组件实例，在js里要实现工厂方法只需创建一个带type参数的createElement的绑定函数：
		ReactElement.createFactory = function(type) {
		  var factory = ReactElement.createElement.bind(null, type);
		  return factory;
		};
		创建模式目的是隔离与简化创建组件的过程，模式的东西自然是可用可不用，如果需要批量创建某个组件时，可以通过工厂方法来实现：
		var h = React.createFactory(Hello);
		h({x:1})
		h({x:2})
		h({x:3})


/* React.render(element,container,[callback]) - 将虚拟DOM上的对象渲染到真实DOM上, 渲染到DOM元素中末尾
element 使用createElement()方法创建的React元素，注意，不是HTML元素！;
container 真实DOM中的HTML元素，作为渲染的目标容器   语法： document.querySelector("selector")
callback 可选的函数，当渲染完成或更新后被执行
*/
    React.render(element,document.querySelector("#content"));

3.3 复合组件:通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。
	1	demo1 :
		// 复合组件
    		var HellowDemo = React.createClass({
				TextCenter : {
					textAlign : "center"
				},
				DataArr : [
					<h1>菜鸟教程</h1>,
						<h2>学的不仅是技术，更是梦想！</h2>,
				],
				render  : function(){
					return (
						<div style={this.TextCenter}>
							<h1>Hello World!!!</h1>
							<h3>开始学习ReactJS!！！！</h3>
							<h1>{1+1}</h1>
							<div>{this.DataArr}</div>
							<Demo1/>
						</div>
					);
				}
			}) ;

            // 组件1
            var Demo1 = React.createClass({
                render : function () {
                    return <div>我是demo,我是组件, 我是帅哥</div>
                }
            });
			React.render(
				<HellowDemo/>,
				document.getElementById('app')
			);
	2	demo2 : 
			var WebSite = React.createClass({
			  render: function() {
			    return (
			      <div>
			        <Name name={this.props.name} />
			        <Link site={this.props.site} />
			      </div>
			    );
			  }
			});

			var Name = React.createClass({
			  render: function() {
			    return (
			      <h1>{this.props.name}</h1>
			    );
			  }
			});

			var Link = React.createClass({
			  render: function() {
			    return (
			      <a href={this.props.site}>
			        {this.props.site}
			      </a>
			    );
			  }
			});

			React.render(
			  <WebSite name="菜鸟教程" site=" http://www.runoob.com" />, // WebSite是组件的聚合体
			  document.getElementById('example')
			);
	
4.1 属性 : props
	props是不可变的,而 state 可以根据与用户交互来改变。
	使用props字段访问实例元素的属性。 // 是实例元素! 的属性!
	例: this.props.on

4.2 内联样式: 
	语法: return <Element className="" style={{}}></Element>
		注意: React中使用驼峰命名规范: className; style 的语法是{{}} ;  大括号里面包含一个json对象; 
			可以 var a = {} ;  style = {a}  ===  style = {{}}
	在React元素中声明样式，需要给出一个JSON对象，其字段对应样式名称，比如要渲染出 上面的HTML片段，需要这样：
	//定义React组件
		var myStyle = {
		    width:"200px",
		    height:"200px"
		};
		//JSX
		var e = <div style={myStyle} />;
		//JavaScript
		var e = React.createElement(
		    "div",{
		        style : myStyle
		    });
		//render
		React.render(e,querySelector("...")));    

	可以设置可选的值: http://www.hubwiz.com/class/552762019964049d1872fc88

4.3 记忆状态 : state // state 和 props 好重要;
	React的组件的确引入了状态机的概念，通过将组件划分为不同的状态，使组件具有 了一定的记忆能力：
	state - 组件的状态变量
		每个React组件实例都有一个state变量，用来保存组件的当前状态。可以在 任何时刻使用this.state读取当前状态。
	getInitialState() - 设置组件初始状态
		组件的实现者应当实现一个getInitialState()方法来设置组件的初始状态。 getInitialState()方法必须返回一个JSON对象或空值null， 这意味着即使你只需要一个简单的标志作为状态，比如true或false，也要把它放到JSON对象里。
	setState(currentState) - 设置组件当前状态
		尽管可以使用this.state来直接设置组件当前状态，但React要求我们使用 setState()方法来进行状态设置。这是因为，setState()方法会自动 地重新渲染组件，而这通常是我们所期望的。

		参数currentState是一个JSON对象，不必包含状态变量的所有字段，setState()方法会 将这个参数值与当前状态this.sate进行合并，结果作为状态变量的新值。

4.4 React Components Lifecycle
	三个状态: 
		a Mounted  React Components被render解析生成对应的DOM节点并被插入浏览器的DOM结构的一个过程
		b Update  一个mounted的React Components被重新render的过程
		c Unmounted  每一个状态React都封装了对应的hook函数
			一个mounted的React Components对应的DOM节点被从DOM结构中移除的这样一个过程


4.5 React 的事件绑定
		// React 的事件绑定:
		var TestClick = React.createClass({
			handClick : function(event){ // event 是获取的事件对象, 在原生JS改进而来, 可以阻止浏览器的默认行为: 阻止冒泡等
				var tipE = React.finDomNode(this.ref.tip);
				if(tipE.style.display === "none"){
					tip.style.diplay = "block"
				}else{
					tipE.style.display = "none"
				}
				event.stopPro();
				event.preventDefault()
			}
			rander : function(){
				return (
					<div>
						<button onClick={this.handClick}>县显示||隐藏</button>	 // 使用大括号包裹引用的函数
						<span ref="tip">测试点击</span>
					</div> /*用div包裹是为了返回一个结果，而不是两个结果 */
				)
			}
		})
		





使用react与原生的区别：
	快速创建新节点，并且文本会覆盖（见时间戳实例）


AngularJS定义组件的方式和React截然不同。如果说HTML是一个轮子，AngularJS 的指令/Directive则是给这个轮子镶了个金边，而React，重新造了个轮子： JSX。

◆ JSX 相关:	
1. 注意：最简单开始学习 JSX 的方法就是使用浏览器端的JSXTransformer。我们强烈建议你不要在生产环境中使用它。你可以通过我们的命令行工具react-tools 包来预编译你的代码。
2. React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。
   （1）、要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。
   （2）、要渲染 React 组件，只需创建一个大写字母开头的本地变量。

◆ HTML 相关：
	1. 原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头。

◆移动平台相关: 
	1. 如果需要在手机或平板等触摸设备上使用 React，需要调用 React.initializeTouchEvents(true); 启用触摸事件处理。     

◆事件相关:
	1. React 使用驼峰命名规范的方式给组件绑定事件处理器。
	2. 利用 ref 属性给子组件命名，通过 this.refs 引用 DOM 节点。
	3. 用回调函数作为属性（ props ）。          

◆数据模型相关:
	1. props 是不可变的(只读)，可以通过this.props 访问到。通过this.props 来访问传入组件的数据，键名就是对应的命名属性，也可以通过this.props.children 访问组件内嵌的任何元素。
	2.state 是可变的,可以通过his.state 是组件私有的，可以通过调用this.setState() 来改变它。
	3. getInitialState() 在组件的生命周期中仅执行一次，用于设置组件的初始化 state 。
	4. componentDidMount 是一个组件渲染的时候被 React 自动调用的方法。
	5. 一个限制: React 组件只能渲染单个根节点。如果你想要返回多个节点，它们必须被包含在同一个节点里。

◆组件相关：
	1. 通过 JavaScript 对象传递一些方法到 React.createClass() 来创建一个新的 React 组件。其中最重要的方法是render ，该方法返回一颗 React 组件树，这棵树最终将会渲染成 HTML 。
	2. ReactDOM.render() 实例化根组件，启动框架，把标记注入到第二个参数指定的原生的 DOM 元素中。






DEMO:
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>EzSwitchComp</title>
	<script src="lib/react.min.js"></script>
	<script src="lib/JSXTransformer.js"></script>
</head>
<body>
	<div id="content"></div>
	<script type="text/jsx">
		//组件定义
		var EzSwitchComp = React.createClass({
			//设置初始状态
			getInitialState : function(){
				return {on : false};
			},
			//处理点击事件，切换状态
			onClick : function(){
				//读取并重设状态，这将触发重新渲染
				this.setState({on : !this.state.on});
			},
			render : function(){
				//根据状态设置样式
				img = this.state.on ? "img/switch-on.png" : img = "img/switch-off.png";
				
				//返回元素
				return <img src = {img} style={{width:"150px"}} onClick={this.onClick}/>;
			}
		});
		//渲染
		React.render(
			<EzSwitchComp/>,
			document.querySelector("#content"));
	</script>
</body>
</html>



DEMO :

{JSX} >>
var myOnoff = "on";
React.render(
    < EzLampComp onoff={myOnoff} />,
    document.querySelector("#content")
);

{JavaScript} >>
var myOnoff = "on";
React.render(
    React.createElement(
        EzLampComp,
        {
            onoff : myOnoff
        }),
    document.querySelector("#content")
);












?!
	JS  this 指代对象的4种情况
?! 
	一个页面只能有一个render?  如果我在作图需要插入新的元素, 如何实现?